Traceback (most recent call last):
  File "/Users/matija/.venv/programiranje-1/lib/python3.9/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/Users/matija/.venv/programiranje-1/lib/python3.9/site-packages/nbclient/client.py", line 1263, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/Users/matija/.venv/programiranje-1/lib/python3.9/site-packages/nbclient/util.py", line 85, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/Users/matija/.venv/programiranje-1/lib/python3.9/site-packages/nbclient/util.py", line 60, in just_run
    return loop.run_until_complete(coro)
  File "/opt/homebrew/Cellar/python@3.9/3.9.18/Frameworks/Python.framework/Versions/3.9/lib/python3.9/asyncio/base_events.py", line 647, in run_until_complete
    return future.result()
  File "/Users/matija/.venv/programiranje-1/lib/python3.9/site-packages/nbclient/client.py", line 701, in async_execute
    await self.async_execute_cell(
  File "/Users/matija/.venv/programiranje-1/lib/python3.9/site-packages/nbclient/client.py", line 1019, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/Users/matija/.venv/programiranje-1/lib/python3.9/site-packages/nbclient/client.py", line 913, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
let rec cmd chrs =
  let if_then_else =
    word "if" >> spaces1 >> bexp >>= fun b ->
    spaces1 >> word "then" >> spaces1 >> cmd >>= fun c1 ->
    spaces1 >> word "else" >> spaces1 >> atomic_cmd >>= fun c2 ->
    return (IfThenElse (b, c1, c2))
  and while_do =
    word "while" >> spaces1 >> bexp >>= fun b ->
    spaces1 >> word "do" >> spaces1 >> atomic_cmd >>= fun c ->
    return (WhileDo (b, c))
  and seq =
    atomic_cmd >>= fun c1 ->
    spaces >> word ";" >> spaces >> cmd >>= fun c2 ->
    return (Seq (c1, c2))
  in
  one_of [ if_then_else; while_do; seq; atomic_cmd ] chrs

and atomic_cmd chrs =
  let assign =
    location >>= fun l ->
    spaces >> word ":=" >> spaces >> exp >>= fun e ->
    return (Assign (l, e))
  and skip = word "skip" >> return Skip
  and print_int =
    word "print" >> spaces1 >> exp >>= fun e -> return (PrintInt e)
  in
  one_of [ assign; skip; print_int; parens cmd ] chrs
------------------


<Error>: 

